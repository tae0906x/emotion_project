import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.model_selection, sklearn.linear_model, sklearn.svm, sklearn.metrics
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.svm import SVC
import os
df = pd.read_csv('voice.csv')
df.head()
df.describe()
df.info()
df.isnull().sum()
df.replace(to_replace="male", value=1, inplace=True)
df.replace(to_replace="female", value=0, inplace=True)
df.label.unique()
xData=df.iloc[:,:-1]
yData=df.iloc[:,-1]
xData.shape, yData.shape
TRAINSPLIT = 0.8
xTrain, xTest, yTrain, yTest = sklearn.model_selection.train_test_split(xData, yData, train_size=TRAINSPLIT)
xTrain.shape, yTrain.shape
plt.figure(figsize=(18, 8))
plt.subplot(1, 2, 1)
df.label.value_counts().plot(kind="pie",fontsize=16,labels=["Male", "Female"],ylabel="Male vs Female",autopct='%1.1f%%');
plt.subplot(1, 2, 2)
sns.countplot(x="label",data=df, palette="pastel")
plt.show()
plt.figure(figsize=(12,8))
data = df.corr()["label"].sort_values(ascending=False)
indices = data.index
labels = []
corr = []
for i in range(1, len(indices)):
    labels.append(indices[i])
    corr.append(data[i])
sns.barplot(x=corr, y=labels, palette='pastel')
plt.title('Correlation coefficient between different features and Label')
plt.show()
plt.figure(figsize=(20,8))
sns.histplot(df.meanfun, color=sns.color_palette('pastel')[0])
plt.show()
regressionModel = LogisticRegression(solver='liblinear')
regressionModel.fit(xTrain,yTrain)
regressionModel.score(xTrain,yTrain)
KNNModel = KNeighborsClassifier(n_neighbors=3)
KNNModel.fit(xTrain,yTrain)
KNNModel.score(xTrain,yTrain)
gpcModel = GaussianProcessClassifier()
gpcModel.fit(xTrain, yTrain)
gpcModel.score(xTrain, yTrain)
trainScores = [regressionModel.score(xTrain, yTrain), KNNModel.score(xTrain, yTrain), gpcModel.score(xTrain, yTrain)]
testScores = [regressionModel.score(xTest, yTest), KNNModel.score(xTest, yTest), gpcModel.score(xTest, yTest)]
indices = ['Logistic Regression', 'KNN', 'GPC']
scores = pd.DataFrame({'Training Score': trainScores,'Testing Score': testScores}, index=indices)
plot = scores.plot.bar(figsize=(16, 8), rot=0, color=['#df6589ff', '#3c1053ff'])
plt.title('Training and Testing Scores')
plt.show()
scores
